"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[717],{3905:function(e,t,r){r.r(t),r.d(t,{MDXContext:function(){return l},MDXProvider:function(){return d},mdx:function(){return h},useMDXComponents:function(){return p},withMDXComponents:function(){return u}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e}).apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),u=function(e){return function(t){var r=p(t.components);return a.createElement(e,o({},t,{components:r}))}},p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(r),d=n,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return r?a.createElement(f,s(s({ref:t},l),{},{components:r})):a.createElement(f,s({ref:t},l))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},70557:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var a=r(83117),n=r(80102),o=(r(67294),r(3905)),i=["components"],s={sidebar_position:6,id:"aria-vrs",title:"How Project Aria Uses VRS"},c="**How Project Aria Uses VRS**",l={unversionedId:"aria-vrs",id:"aria-vrs",isDocsHomePage:!1,title:"How Project Aria Uses VRS",description:"Project Aria chose VRS as its data container because it is a file format designed to record & playback streams of XR sensor data and supports huge file sizes. These VRS files contain streams of time-sorted records generated for each sensor, with one set of sensors per stream. Project Aria data uses VRS for features such as:",source:"@site/docs/aria-vrs.md",sourceDirName:".",slug:"/aria-vrs",permalink:"/Aria_data_tools/docs/aria-vrs",editUrl:"https://github.com/facebookresearch/aria_data_tools/docs/aria-vrs.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,id:"aria-vrs",title:"How Project Aria Uses VRS"},sidebar:"tutorialSidebar",previous:{title:"Desktop Activities Capture Setup",permalink:"/Aria_data_tools/docs/pilotdata/desk/desktop_setup"},next:{title:"Getting to Know and Use VRS",permalink:"/Aria_data_tools/docs/use-vrs"}},u=[],p={toc:u};function d(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.mdx)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"how-project-aria-uses-vrs"},(0,o.mdx)("strong",{parentName:"h1"},"How Project Aria Uses VRS")),(0,o.mdx)("p",null,"Project Aria chose ",(0,o.mdx)("a",{parentName:"p",href:"https://facebookresearch.github.io/vrs/"},"VRS")," as its data container because it is a file format designed to record & playback streams of XR sensor data and supports huge file sizes. These VRS files contain streams of time-sorted records generated for each sensor, with one set of sensors per stream. Project Aria data uses VRS for features such as:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Records are structured as a succession of typed content blocks."),(0,o.mdx)("li",{parentName:"ul"},"The ",(0,o.mdx)("inlineCode",{parentName:"li"},"DataLayout")," definitions of the metadata blocks in Project Aria VRS files are open sourced under ",(0,o.mdx)("a",{parentName:"li",href:"https://github.com/facebookresearch/vrs/tree/main/vrs/oss/aria"},"vrs/vrs/oss/aria"),". These definitions provide an overview of what information can be extracted for each stream from a Project Aria sequence."),(0,o.mdx)("li",{parentName:"ul"},"Streams contain ",(0,o.mdx)("inlineCode",{parentName:"li"},"Configuration"),", ",(0,o.mdx)("inlineCode",{parentName:"li"},"State")," and ",(0,o.mdx)("inlineCode",{parentName:"li"},"Data")," records, each with a timestamp in a common time domain for the whole file."),(0,o.mdx)("li",{parentName:"ul"},"Playback is optimized for timestamp order, which is key for network streaming."),(0,o.mdx)("li",{parentName:"ul"},"Random-access playback is supported via VRS")),(0,o.mdx)("p",null,"The Aria Research Kit: Aria Data Tools provides an interface to access the data via an abstraction (an X_provider string) that allows users to iterate through all the sensor recordings."),(0,o.mdx)("p",null,"VRS is automatically installed when you install Aria Data Tools. ",(0,o.mdx)("a",{parentName:"p",href:"https://facebookresearch.github.io/vrs/"},"VRS")," is an open tool with API documentation available on Github."),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"https://github.com/facebookresearch/vrs"},"VRS Readme")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"https://facebookresearch.github.io/vrs/"},"VRS Documentation")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"https://github.com/facebookresearch/vrs/tree/main/vrs"},"VRS Core Functionality"))))}d.isMDXComponent=!0}}]);